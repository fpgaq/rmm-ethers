/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "PositionDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionDescriptor__factory>;
    getContractFactory(
      name: "PositionRenderer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionRenderer__factory>;
    getContractFactory(
      name: "PrimitiveManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimitiveManager__factory>;
    getContractFactory(
      name: "PrimitiveEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimitiveEngine__factory>;
    getContractFactory(
      name: "PrimitiveFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimitiveFactory__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "PositionDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionDescriptor>;
    getContractAt(
      name: "PositionRenderer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionRenderer>;
    getContractAt(
      name: "PrimitiveManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrimitiveManager>;
    getContractAt(
      name: "PrimitiveEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrimitiveEngine>;
    getContractAt(
      name: "PrimitiveFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrimitiveFactory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
