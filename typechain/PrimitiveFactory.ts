/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PrimitiveFactoryInterface extends utils.Interface {
  functions: {
    "MIN_LIQUIDITY_FACTOR()": FunctionFragment;
    "args()": FunctionFragment;
    "deploy(address,address)": FunctionFragment;
    "deployer()": FunctionFragment;
    "getEngine(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MIN_LIQUIDITY_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "args", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEngine",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_LIQUIDITY_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "args", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEngine", data: BytesLike): Result;

  events: {
    "DeployEngine(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployEngine"): EventFragment;
}

export type DeployEngineEvent = TypedEvent<
  [string, string, string, string],
  { from: string; risky: string; stable: string; engine: string }
>;

export type DeployEngineEventFilter = TypedEventFilter<DeployEngineEvent>;

export interface PrimitiveFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrimitiveFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_LIQUIDITY_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    args(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        factory: string;
        risky: string;
        stable: string;
        scaleFactorRisky: BigNumber;
        scaleFactorStable: BigNumber;
        minLiquidity: BigNumber;
      }
    >;

    deploy(
      risky: string,
      stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    getEngine(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  MIN_LIQUIDITY_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  args(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber] & {
      factory: string;
      risky: string;
      stable: string;
      scaleFactorRisky: BigNumber;
      scaleFactorStable: BigNumber;
      minLiquidity: BigNumber;
    }
  >;

  deploy(
    risky: string,
    stable: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  getEngine(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    MIN_LIQUIDITY_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    args(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber] & {
        factory: string;
        risky: string;
        stable: string;
        scaleFactorRisky: BigNumber;
        scaleFactorStable: BigNumber;
        minLiquidity: BigNumber;
      }
    >;

    deploy(
      risky: string,
      stable: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deployer(overrides?: CallOverrides): Promise<string>;

    getEngine(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DeployEngine(address,address,address,address)"(
      from?: string | null,
      risky?: string | null,
      stable?: string | null,
      engine?: null
    ): DeployEngineEventFilter;
    DeployEngine(
      from?: string | null,
      risky?: string | null,
      stable?: string | null,
      engine?: null
    ): DeployEngineEventFilter;
  };

  estimateGas: {
    MIN_LIQUIDITY_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    args(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      risky: string,
      stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    getEngine(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_LIQUIDITY_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    args(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      risky: string,
      stable: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEngine(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
